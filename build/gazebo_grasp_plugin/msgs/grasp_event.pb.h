// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grasp_event.proto

#ifndef PROTOBUF_grasp_5fevent_2eproto__INCLUDED
#define PROTOBUF_grasp_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_grasp_5fevent_2eproto();
void protobuf_AssignDesc_grasp_5fevent_2eproto();
void protobuf_ShutdownFile_grasp_5fevent_2eproto();

class GraspEvent;

// ===================================================================

class GraspEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.GraspEvent) */ {
 public:
  GraspEvent();
  virtual ~GraspEvent();

  GraspEvent(const GraspEvent& from);

  inline GraspEvent& operator=(const GraspEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraspEvent& default_instance();

  void Swap(GraspEvent* other);

  // implements Message ----------------------------------------------

  inline GraspEvent* New() const { return New(NULL); }

  GraspEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraspEvent& from);
  void MergeFrom(const GraspEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraspEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string arm = 1;
  bool has_arm() const;
  void clear_arm();
  static const int kArmFieldNumber = 1;
  const ::std::string& arm() const;
  void set_arm(const ::std::string& value);
  void set_arm(const char* value);
  void set_arm(const char* value, size_t size);
  ::std::string* mutable_arm();
  ::std::string* release_arm();
  void set_allocated_arm(::std::string* arm);

  // required string object = 2;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // required bool attached = 3;
  bool has_attached() const;
  void clear_attached();
  static const int kAttachedFieldNumber = 3;
  bool attached() const;
  void set_attached(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.GraspEvent)
 private:
  inline void set_has_arm();
  inline void clear_has_arm();
  inline void set_has_object();
  inline void clear_has_object();
  inline void set_has_attached();
  inline void clear_has_attached();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr arm_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  bool attached_;
  friend void  protobuf_AddDesc_grasp_5fevent_2eproto();
  friend void protobuf_AssignDesc_grasp_5fevent_2eproto();
  friend void protobuf_ShutdownFile_grasp_5fevent_2eproto();

  void InitAsDefaultInstance();
  static GraspEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GraspEvent

// required string arm = 1;
inline bool GraspEvent::has_arm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraspEvent::set_has_arm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraspEvent::clear_has_arm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraspEvent::clear_arm() {
  arm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arm();
}
inline const ::std::string& GraspEvent::arm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GraspEvent.arm)
  return arm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraspEvent::set_arm(const ::std::string& value) {
  set_has_arm();
  arm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GraspEvent.arm)
}
inline void GraspEvent::set_arm(const char* value) {
  set_has_arm();
  arm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.GraspEvent.arm)
}
inline void GraspEvent::set_arm(const char* value, size_t size) {
  set_has_arm();
  arm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.GraspEvent.arm)
}
inline ::std::string* GraspEvent::mutable_arm() {
  set_has_arm();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GraspEvent.arm)
  return arm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraspEvent::release_arm() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GraspEvent.arm)
  clear_has_arm();
  return arm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraspEvent::set_allocated_arm(::std::string* arm) {
  if (arm != NULL) {
    set_has_arm();
  } else {
    clear_has_arm();
  }
  arm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arm);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GraspEvent.arm)
}

// required string object = 2;
inline bool GraspEvent::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraspEvent::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraspEvent::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraspEvent::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
inline const ::std::string& GraspEvent::object() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GraspEvent.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraspEvent::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GraspEvent.object)
}
inline void GraspEvent::set_object(const char* value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.GraspEvent.object)
}
inline void GraspEvent::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.GraspEvent.object)
}
inline ::std::string* GraspEvent::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GraspEvent.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraspEvent::release_object() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GraspEvent.object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraspEvent::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GraspEvent.object)
}

// required bool attached = 3;
inline bool GraspEvent::has_attached() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GraspEvent::set_has_attached() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GraspEvent::clear_has_attached() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GraspEvent::clear_attached() {
  attached_ = false;
  clear_has_attached();
}
inline bool GraspEvent::attached() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GraspEvent.attached)
  return attached_;
}
inline void GraspEvent::set_attached(bool value) {
  set_has_attached();
  attached_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.GraspEvent.attached)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grasp_5fevent_2eproto__INCLUDED
