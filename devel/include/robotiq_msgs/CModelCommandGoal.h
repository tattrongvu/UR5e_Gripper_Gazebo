// Generated by gencpp from file robotiq_msgs/CModelCommandGoal.msg
// DO NOT EDIT!


#ifndef ROBOTIQ_MSGS_MESSAGE_CMODELCOMMANDGOAL_H
#define ROBOTIQ_MSGS_MESSAGE_CMODELCOMMANDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotiq_msgs
{
template <class ContainerAllocator>
struct CModelCommandGoal_
{
  typedef CModelCommandGoal_<ContainerAllocator> Type;

  CModelCommandGoal_()
    : position(0.0)
    , velocity(0.0)
    , force(0.0)  {
    }
  CModelCommandGoal_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , force(0.0)  {
  (void)_alloc;
    }



   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _force_type;
  _force_type force;





  typedef boost::shared_ptr< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CModelCommandGoal_

typedef ::robotiq_msgs::CModelCommandGoal_<std::allocator<void> > CModelCommandGoal;

typedef boost::shared_ptr< ::robotiq_msgs::CModelCommandGoal > CModelCommandGoalPtr;
typedef boost::shared_ptr< ::robotiq_msgs::CModelCommandGoal const> CModelCommandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator1> & lhs, const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.force == rhs.force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator1> & lhs, const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotiq_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39ea8a77dc82d646f4e6262f138c1b20";
  }

  static const char* value(const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39ea8a77dc82d646ULL;
  static const uint64_t static_value2 = 0xf4e6262f138c1b20ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotiq_msgs/CModelCommandGoal";
  }

  static const char* value(const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"float64     position\n"
"float64     velocity\n"
"float64     force\n"
;
  }

  static const char* value(const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CModelCommandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotiq_msgs::CModelCommandGoal_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "force: ";
    Printer<double>::stream(s, indent + "  ", v.force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTIQ_MSGS_MESSAGE_CMODELCOMMANDGOAL_H
